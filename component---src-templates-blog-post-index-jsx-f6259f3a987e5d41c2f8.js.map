{"version":3,"sources":["webpack:///./src/templates/BlogPost/index.jsx","webpack:///./node_modules/gatsby-plugin-mdx/index.js","webpack:///./node_modules/core-js/modules/es6.reflect.construct.js","webpack:///./node_modules/gatsby-plugin-mdx/mdx-renderer.js"],"names":["BlogSEO","post","site","meta","property","content","fields","author","siteMetadata","date","schema","blogPost","publisher","headline","frontmatter","title","mainEntityOfPage","slug","datePublished","dateModified","lastModified","image","imageSpenser","excerpt","push","name","tags","keywords","join","type","JSON","stringify","data","mdx","body","description","dateTime","dateFormat","query","MDXRenderer","require","module","$export","create","aFunction","anObject","isObject","fails","bind","rConstruct","Reflect","construct","NEW_TARGET_BUG","F","ARGS_BUG","S","Target","args","newTarget","arguments","length","$args","apply","proto","prototype","instance","Object","result","Function","call","React","useMDXComponents","useMDXScope","scope","components","children","props","mdxComponents","mdxScope","End","fullScope","keys","values","key","fn"],"mappings":"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","file":"component---src-templates-blog-post-index-jsx-f6259f3a987e5d41c2f8.js","sourcesContent":["import { graphql } from \"gatsby\"\nimport { MDXRenderer } from 'gatsby-plugin-mdx';\nimport Helmet from \"react-helmet\"\nimport React from 'react';\nimport dateFormat from 'dateformat';\n\nimport SEO from \"../../components/SEO\"\nimport Layout from '../../components/Layout';\nimport imageSpenser from '../../images/spenserj.jpg';\n\nconst BlogSEO = ({ post, site }) => {\n  const meta = [\n    { property: 'og:type', content: 'article' },\n    { property: 'article:author', content: post.fields.author || site.siteMetadata.author },\n    { property: 'article:published_time', content: post.fields.date },\n  ];\n\n  const schema = {\n    '@context': 'http://schema.org',\n    '@type': 'Blog',\n    blogPost: {\n      '@type': 'BlogPosting',\n      author: 'https://spenserj.com/#identity',\n      publisher: 'https://spenserj.com/#identity',\n      headline: post.frontmatter.title,\n      mainEntityOfPage: `https://spenserj.com${post.slug}`,\n      datePublished: post.fields.date,\n      dateModified: post.fields.lastModified,\n      image: imageSpenser,\n    }\n  };\n\n  if (post.excerpt) {\n    meta.push({ name: 'description', content: post.excerpt });\n    meta.push({ property: 'og:description', content: post.excerpt });\n  }\n  if (post.frontmatter.tags) {\n    meta.push({ property: 'article:tag', content: post.frontmatter.tags });\n    schema.blogPost.keywords = post.frontmatter.tags.join(', ');\n  }\n\n  return (\n    <Helmet meta={meta}>\n      <script type=\"application/ld+json\">{JSON.stringify(schema)}</script>\n    </Helmet>\n  )\n};\n\nexport default ({ data }) => {\n  const post = data.mdx;\n  const { fields, frontmatter, body, excerpt } = post;\n  return (\n    <Layout>\n      <SEO title={frontmatter.title} description={excerpt} />\n      <BlogSEO post={post} site={data.site} />\n      <h1>{frontmatter.title}</h1>\n      <time\n        dateTime={dateFormat(fields.date, 'yyyy-mm-dd')}\n      >\n        {dateFormat(fields.date, 'dddd, mmmm dS, yyyy')}\n      </time>\n      <MDXRenderer>{body}</MDXRenderer>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query PostsBySlug($slug: String!) {\n    mdx(fields: { slug: { eq: $slug } }) {\n      fields {\n        slug\n        date\n        lastModified\n        author\n      }\n      body\n      excerpt(pruneLength: 150)\n      frontmatter {\n        title\n        author\n        tags\n      }\n    }\n    site {\n      siteMetadata {\n        author\n      }\n    }\n  }\n`;\n","/**\n * Welcome to gatsby-plugin-mdx!\n *\n * Start reading in gatsby-node.js\n */\n\nconst MDXRenderer = require(`./mdx-renderer`)\n\nmodule.exports = {\n  MDXRenderer: MDXRenderer,\n}\n","// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])\nvar $export = require('./_export');\nvar create = require('./_object-create');\nvar aFunction = require('./_a-function');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar fails = require('./_fails');\nvar bind = require('./_bind');\nvar rConstruct = (require('./_global').Reflect || {}).construct;\n\n// MS Edge supports only 2 arguments and argumentsList argument is optional\n// FF Nightly sets third argument as `new.target`, but does not create `this` from it\nvar NEW_TARGET_BUG = fails(function () {\n  function F() { /* empty */ }\n  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);\n});\nvar ARGS_BUG = !fails(function () {\n  rConstruct(function () { /* empty */ });\n});\n\n$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {\n  construct: function construct(Target, args /* , newTarget */) {\n    aFunction(Target);\n    anObject(args);\n    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);\n    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);\n    if (Target == newTarget) {\n      // w/o altered newTarget, optimization for 0-4 arguments\n      switch (args.length) {\n        case 0: return new Target();\n        case 1: return new Target(args[0]);\n        case 2: return new Target(args[0], args[1]);\n        case 3: return new Target(args[0], args[1], args[2]);\n        case 4: return new Target(args[0], args[1], args[2], args[3]);\n      }\n      // w/o altered newTarget, lot of arguments case\n      var $args = [null];\n      $args.push.apply($args, args);\n      return new (bind.apply(Target, $args))();\n    }\n    // with altered newTarget, not support built-in constructors\n    var proto = newTarget.prototype;\n    var instance = create(isObject(proto) ? proto : Object.prototype);\n    var result = Function.apply.call(Target, instance, args);\n    return isObject(result) ? result : instance;\n  }\n});\n","const React = require(`react`)\nconst { useMDXComponents, mdx } = require(`@mdx-js/react`)\nconst { useMDXScope } = require(`./context`)\n\nmodule.exports = function MDXRenderer({\n  scope,\n  components,\n  children,\n  ...props\n}) {\n  const mdxComponents = useMDXComponents(components)\n  const mdxScope = useMDXScope(scope)\n\n  // Memoize the compiled component\n  const End = React.useMemo(() => {\n    if (!children) {\n      return null\n    }\n\n    const fullScope = {\n      // React is here just in case the user doesn't pass them in\n      // in a manual usage of the renderer\n      React,\n      mdx,\n      ...mdxScope,\n    }\n\n    const keys = Object.keys(fullScope)\n    const values = keys.map(key => fullScope[key])\n    const fn = new Function(`_fn`, ...keys, `${children}`)\n\n    return fn({}, ...values)\n  }, [children, scope])\n\n  return React.createElement(End, { components: mdxComponents, ...props })\n}\n"],"sourceRoot":""}